#########################################################
## 'Publishing' Composite Action                   ##
#########################################################
##
## This composite action contains the logic to publish a given template to a number of different locations such as:
## - Template Specs
## - Private Bicep Registry
##
#########################################################
##
##-------------------------------------------##
## ACTION PARAMETERS                         ##
##-------------------------------------------##
##
##   |==============================================================================================================================================================================================================|
##   | Parameter                  | Required | Default | Description                                                                                       | Example                                                |
##   |----------------------------|----------|---------|---------------------------------------------------------------------------------------------------|--------------------------------------------------------|
##   | templateFilePath           | true     | ''      | The path to the template file to publish                                                          | 'modules/api-management/service/main.bicep'            |
##   | subscriptionId             | false    | ''      | The ID of the subscription to publish to                                                          | '11111111-1111-1111-1111-111111111111'                 |
##   | templateSpecsRgName        | false    | ''      | Required to publish to template spec. ResourceGroup of the template spec to publish to            | 'artifacts-rg'                                         |
##   | templateSpecsRgLocation    | false    | ''      | Required to publish to template spec. Location of the template spec resource group                | 'WestEurope'                                           |
##   | templateSpecsDescription   | false    | ''      | Required to publish to template spec. Description of the template spec to publish to              | 'This is an API-Management service template'           |
##   | templateSpecsDoPublish     | false    | 'false' | Flag to indicate whether or not to publish to template specs                                      | 'true'                                                 |
##   | bicepRegistryName          | false    | ''      | Required to publish to private bicep registry. Name of the container registry to publish to       | 'myacr'                                                |
##   | bicepRegistryRgName        | false    | ''      | Required to publish to private bicep registry. Name of the container registry resource group      | 'artifacts-rg'                                         |
##   | bicepRegistryRgLocation    | false    | ''      | Required to publish to private bicep registry. Location of the container registry resource group  | 'WestEurope'                                           |
##   | bicepRegistryDoPublish     | false    | 'false' | Flag to indicate whether or not to publish to the private bicep registry                          | 'true'                                                 |
##   | publishLatest              | false    | 'true'  | Flag to indicate whether or not to publish a "latest" version                                     | 'true'                                                 |
##   | useApiSpecsAlignedName     | false    | 'false' | Flag to indicate whether or not to publish module using their REST API, or their folder path name | 'true'                                                 |
##   |==============================================================================================================================================================================================================|
##
##---------------------------------------------##
name: 'Publishing'
description: 'Publishing'

inputs:
  templateFilePath:
    description: 'The path to the template file to publish'
    required: true
  subscriptionId:
    description: 'The ID of the subscription to publish to'
    required: false
  templateSpecsRgName:
    description: 'Required to publish to template spec. ResourceGroup of the template spec to publish to'
    required: false
  templateSpecsRgLocation:
    description: 'Required to publish to template spec. Location of the template spec resource group'
    required: false
  templateSpecsDescription:
    description: 'Required to publish to template spec. Description of the template spec to publish to'
    required: false
  templateSpecsDoPublish:
    description: 'Flag to indicate whether or not to publish to template specs'
    default: 'false'
    required: false
  bicepRegistryName:
    description: 'Required to publish to private bicep registry. Name of the container registry to publish to'
    required: false
  bicepRegistryRgName:
    description: 'Required to publish to private bicep registry. Name of the container registry resource group'
    required: false
  bicepRegistryRgLocation:
    description: 'Required to publish to private bicep registry. Location of the container registry resource group'
    required: false
  bicepRegistryDoPublish:
    description: 'Flag to indicate whether or not to publish to the private bicep registry'
    default: 'false'
    required: false
  publishLatest:
    description: 'Flag to indicate whether or not to publish a "latest" version'
    default: 'true'
    required: false
  useApiSpecsAlignedName:
    description: 'Flag to indicate whether or not to publish module using their REST API, or their folder path name'
    default: 'false'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: 'Publish module to template specs'
      if: ${{ inputs.templateSpecsDoPublish == 'true' }}
      uses: azure/powershell@v1
      with:
        azPSVersion: 'latest'
        inlineScript: |
          # Grouping task logs
          Write-Output '::group::Publish module to template specs'

          if (-not [String]::IsNullOrEmpty('${{ inputs.subscriptionId }}')) {
            Write-Verbose ('Setting context to subscription [{0}]' -f '${{ inputs.subscriptionId }}') -Verbose
            $null = Set-AzContext -Subscription '${{ inputs.subscriptionId }}'
          }

          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'resourcePublish' 'Get-ModulesToPublish.ps1')
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'resourcePublish' 'Get-ModulesMissingFromTemplateSpecsRG.ps1')
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'resourcePublish' 'Publish-ModuleToTemplateSpecsRG.ps1')

          $modulesToPublish = @()

          ################################
          ##   Get modules to publish   ##
          ################################
          $functionInput = @{
            TemplateFilePath = Join-Path $env:GITHUB_WORKSPACE "${{ inputs.templateFilePath }}"
            PublishLatest    = [System.Convert]::ToBoolean("${{ inputs.publishLatest }}")
          }

          Write-Verbose "Invoke task with" -Verbose
          Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

          # Get the modified child resources
          $modulesToPublish += Get-ModulesToPublish @functionInput -Verbose

          #############################
          ##   Get missing modules   ##
          #############################

          # Add all modules that don't exist in the target location
          $missingInputObject = @{
              TemplateFilePath    = Join-Path $env:GITHUB_WORKSPACE "${{ inputs.templateFilePath }}"
              TemplateSpecsRGName = '${{ inputs.templateSpecsRgName }}'
              PublishLatest       = [System.Convert]::ToBoolean("${{ inputs.publishLatest }}")
          }

          Write-Verbose "Invoke Get-ModulesMissingFromTemplateSpecsRG with" -Verbose
          Write-Verbose ($missingInputObject | ConvertTo-Json | Out-String) -Verbose

          $missingModules = Get-ModulesMissingFromTemplateSpecsRG @missingInputObject

          foreach($missingModule in $missingModules) {
            if($modulesToPublish.TemplateFilePath -notcontains $missingModule.TemplateFilePath) {
              $modulesToPublish += $missingModule
            }
          }

          # Filter modules to publish 'prerelease' only if branch is not main/master
          $BranchName = "$env:GITHUB_REF_NAME"
          if ($BranchName -ne 'main' -and $BranchName -ne 'master') {
            Write-Verbose "Filtering modules to only publish a [prerelease] version as the current branch [$BranchName] is not [main/master]." -Verbose
            $modulesToPublish = $modulesToPublish | Where-Object -Property version -like '*-prerelease'
          }

          #################
          ##   Publish   ##
          #################
          foreach ($moduleToPublish in $modulesToPublish) {
            $RelPath = (($moduleToPublish.TemplateFilePath).Split('/modules/')[-1]).Split('/main.')[0]
            Write-Output "::group::$(' - [{0}] [{1}]' -f $RelPath, $moduleToPublish.Version)"

            $functionInput = @{
              TemplateFilePath         = $moduleToPublish.TemplateFilePath
              TemplateSpecsRgName      = '${{ inputs.templateSpecsRgName }}'
              TemplateSpecsRgLocation  = '${{ inputs.templateSpecsRgLocation }}'
              TemplateSpecsDescription = '${{ inputs.templateSpecsDescription }}'
              ModuleVersion            = $moduleToPublish.Version
              UseApiSpecsAlignedName   = [System.Convert]::ToBoolean('${{ inputs.useApiSpecsAlignedName }}')
            }

            Write-Verbose "Invoke task with" -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            Publish-ModuleToTemplateSpecsRG @functionInput -Verbose
          }

          Write-Output '::endgroup::'

    - name: 'Publish module to private bicep registry'
      if: ${{ inputs.bicepRegistryDoPublish == 'true' }}
      uses: azure/powershell@v1
      with:
        azPSVersion: 'latest'
        inlineScript: |
          # Grouping task logs
          Write-Output '::group::Publish module to private bicep registry'

          if (-not [String]::IsNullOrEmpty('${{ inputs.subscriptionId }}')) {
            Write-Verbose ('Setting context to subscription [{0}]' -f '${{ inputs.subscriptionId }}') -Verbose
            $null = Set-AzContext -Subscription '${{ inputs.subscriptionId }}'
          }

          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'resourcePublish' 'Get-ModulesToPublish.ps1')
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'resourcePublish' 'Get-ModulesMissingFromPrivateBicepRegistry.ps1')
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'resourcePublish' 'Publish-ModuleToPrivateBicepRegistry.ps1')

          $modulesToPublish = @()

          ################################
          ##   Get modules to publish   ##
          ################################
          $functionInput = @{
            TemplateFilePath = Join-Path $env:GITHUB_WORKSPACE "${{ inputs.templateFilePath }}"
            PublishLatest    = [System.Convert]::ToBoolean("${{ inputs.publishLatest }}")
          }

          Write-Verbose "Invoke task with" -Verbose
          Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

          # Get the modified child resources
          $modulesToPublish += Get-ModulesToPublish @functionInput -Verbose

          #############################
          ##   Get missing modules   ##
          #############################
          # Add all modules that don't exist in the target location
          $missingInputObject = @{
              TemplateFilePath    = Join-Path $env:GITHUB_WORKSPACE "${{ inputs.templateFilePath }}"
              BicepRegistryName   = '${{ inputs.bicepRegistryName }}'
              BicepRegistryRgName = '${{ inputs.bicepRegistryRgName }}'
              PublishLatest       = [System.Convert]::ToBoolean("${{ inputs.publishLatest }}")
          }

          Write-Verbose "Invoke Get-ModulesMissingFromPrivateBicepRegistry with" -Verbose
          Write-Verbose ($missingInputObject | ConvertTo-Json | Out-String) -Verbose

          $missingModules = Get-ModulesMissingFromPrivateBicepRegistry @missingInputObject

          foreach($missingModule in $missingModules) {
            if($modulesToPublish.TemplateFilePath -notcontains $missingModule.TemplateFilePath) {
              $modulesToPublish += $missingModule
            }
          }

          # Filter modules to publish 'prerelease' only if branch is not main/master
          $BranchName = "$env:GITHUB_REF_NAME"
          if ($BranchName -ne 'main' -and $BranchName -ne 'master') {
            Write-Verbose "Filtering modules to only publish a [prerelease] version as the current branch [$BranchName] is not [main/master]." -Verbose
            $modulesToPublish = $modulesToPublish | Where-Object -Property version -like '*-prerelease'
          }

          #################
          ##   Publish   ##
          #################
          foreach ($moduleToPublish in $modulesToPublish) {
            $RelPath = (($moduleToPublish.TemplateFilePath).Split('/modules/')[-1]).Split('/main.')[0]
            Write-Output "::group::$(' - [{0}] [{1}]' -f $RelPath, $moduleToPublish.Version)"

            $functionInput = @{
              TemplateFilePath        = $moduleToPublish.TemplateFilePath
              BicepRegistryName       = '${{ inputs.bicepRegistryName }}'
              BicepRegistryRgName     = '${{ inputs.bicepRegistryRgName }}'
              BicepRegistryRgLocation = '${{ inputs.bicepRegistryRgLocation }}'
              ModuleVersion           = $moduleToPublish.Version
              UseApiSpecsAlignedName  = [System.Convert]::ToBoolean('${{ inputs.useApiSpecsAlignedName }}')
            }

            Write-Verbose "Invoke task with" -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            Publish-ModuleToPrivateBicepRegistry @functionInput -Verbose
          }

          Write-Output '::endgroup::'
